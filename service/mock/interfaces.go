// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/irfanhanif/swtpro-intv/entity"
	service "github.com/irfanhanif/swtpro-intv/service"
)

// MockIRegisterNewUser is a mock of IRegisterNewUser interface.
type MockIRegisterNewUser struct {
	ctrl     *gomock.Controller
	recorder *MockIRegisterNewUserMockRecorder
}

// MockIRegisterNewUserMockRecorder is the mock recorder for MockIRegisterNewUser.
type MockIRegisterNewUserMockRecorder struct {
	mock *MockIRegisterNewUser
}

// NewMockIRegisterNewUser creates a new mock instance.
func NewMockIRegisterNewUser(ctrl *gomock.Controller) *MockIRegisterNewUser {
	mock := &MockIRegisterNewUser{ctrl: ctrl}
	mock.recorder = &MockIRegisterNewUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegisterNewUser) EXPECT() *MockIRegisterNewUserMockRecorder {
	return m.recorder
}

// RegisterNewUser mocks base method.
func (m *MockIRegisterNewUser) RegisterNewUser(ctx context.Context, newUser service.NewUser) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewUser", ctx, newUser)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNewUser indicates an expected call of RegisterNewUser.
func (mr *MockIRegisterNewUserMockRecorder) RegisterNewUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewUser", reflect.TypeOf((*MockIRegisterNewUser)(nil).RegisterNewUser), ctx, newUser)
}

// MockIGenerateToken is a mock of IGenerateToken interface.
type MockIGenerateToken struct {
	ctrl     *gomock.Controller
	recorder *MockIGenerateTokenMockRecorder
}

// MockIGenerateTokenMockRecorder is the mock recorder for MockIGenerateToken.
type MockIGenerateTokenMockRecorder struct {
	mock *MockIGenerateToken
}

// NewMockIGenerateToken creates a new mock instance.
func NewMockIGenerateToken(ctrl *gomock.Controller) *MockIGenerateToken {
	mock := &MockIGenerateToken{ctrl: ctrl}
	mock.recorder = &MockIGenerateTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGenerateToken) EXPECT() *MockIGenerateTokenMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockIGenerateToken) GenerateToken(ctx context.Context, phoneNumber, password string) (string, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, phoneNumber, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIGenerateTokenMockRecorder) GenerateToken(ctx, phoneNumber, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIGenerateToken)(nil).GenerateToken), ctx, phoneNumber, password)
}

// MockIGetUserByID is a mock of IGetUserByID interface.
type MockIGetUserByID struct {
	ctrl     *gomock.Controller
	recorder *MockIGetUserByIDMockRecorder
}

// MockIGetUserByIDMockRecorder is the mock recorder for MockIGetUserByID.
type MockIGetUserByIDMockRecorder struct {
	mock *MockIGetUserByID
}

// NewMockIGetUserByID creates a new mock instance.
func NewMockIGetUserByID(ctrl *gomock.Controller) *MockIGetUserByID {
	mock := &MockIGetUserByID{ctrl: ctrl}
	mock.recorder = &MockIGetUserByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetUserByID) EXPECT() *MockIGetUserByIDMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockIGetUserByID) GetUserByID(ctx context.Context, id uuid.UUID) (entity.IUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(entity.IUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIGetUserByIDMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIGetUserByID)(nil).GetUserByID), ctx, id)
}

// MockIUpdateUserByID is a mock of IUpdateUserByID interface.
type MockIUpdateUserByID struct {
	ctrl     *gomock.Controller
	recorder *MockIUpdateUserByIDMockRecorder
}

// MockIUpdateUserByIDMockRecorder is the mock recorder for MockIUpdateUserByID.
type MockIUpdateUserByIDMockRecorder struct {
	mock *MockIUpdateUserByID
}

// NewMockIUpdateUserByID creates a new mock instance.
func NewMockIUpdateUserByID(ctrl *gomock.Controller) *MockIUpdateUserByID {
	mock := &MockIUpdateUserByID{ctrl: ctrl}
	mock.recorder = &MockIUpdateUserByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUpdateUserByID) EXPECT() *MockIUpdateUserByIDMockRecorder {
	return m.recorder
}

// UpdateUserByID mocks base method.
func (m *MockIUpdateUserByID) UpdateUserByID(ctx context.Context, id uuid.UUID, updateData service.UserUpdateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, id, updateData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockIUpdateUserByIDMockRecorder) UpdateUserByID(ctx, id, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockIUpdateUserByID)(nil).UpdateUserByID), ctx, id, updateData)
}
