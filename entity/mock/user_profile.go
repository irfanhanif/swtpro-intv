// Code generated by MockGen. DO NOT EDIT.
// Source: user_profile.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/irfanhanif/swtpro-intv/entity"
)

// MockINewUserProfile is a mock of INewUserProfile interface.
type MockINewUserProfile struct {
	ctrl     *gomock.Controller
	recorder *MockINewUserProfileMockRecorder
}

// MockINewUserProfileMockRecorder is the mock recorder for MockINewUserProfile.
type MockINewUserProfileMockRecorder struct {
	mock *MockINewUserProfile
}

// NewMockINewUserProfile creates a new mock instance.
func NewMockINewUserProfile(ctrl *gomock.Controller) *MockINewUserProfile {
	mock := &MockINewUserProfile{ctrl: ctrl}
	mock.recorder = &MockINewUserProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINewUserProfile) EXPECT() *MockINewUserProfileMockRecorder {
	return m.recorder
}

// NewUserProfile mocks base method.
func (m *MockINewUserProfile) NewUserProfile(fullName string) entity.IUserProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserProfile", fullName)
	ret0, _ := ret[0].(entity.IUserProfile)
	return ret0
}

// NewUserProfile indicates an expected call of NewUserProfile.
func (mr *MockINewUserProfileMockRecorder) NewUserProfile(fullName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserProfile", reflect.TypeOf((*MockINewUserProfile)(nil).NewUserProfile), fullName)
}

// MockIUserProfile is a mock of IUserProfile interface.
type MockIUserProfile struct {
	ctrl     *gomock.Controller
	recorder *MockIUserProfileMockRecorder
}

// MockIUserProfileMockRecorder is the mock recorder for MockIUserProfile.
type MockIUserProfileMockRecorder struct {
	mock *MockIUserProfile
}

// NewMockIUserProfile creates a new mock instance.
func NewMockIUserProfile(ctrl *gomock.Controller) *MockIUserProfile {
	mock := &MockIUserProfile{ctrl: ctrl}
	mock.recorder = &MockIUserProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserProfile) EXPECT() *MockIUserProfileMockRecorder {
	return m.recorder
}

// FullName mocks base method.
func (m *MockIUserProfile) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockIUserProfileMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockIUserProfile)(nil).FullName))
}

// ID mocks base method.
func (m *MockIUserProfile) ID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockIUserProfileMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIUserProfile)(nil).ID))
}
