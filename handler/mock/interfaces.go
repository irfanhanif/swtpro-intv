// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "github.com/irfanhanif/swtpro-intv/handler/context"
)

// MockIHandle is a mock of IHandle interface.
type MockIHandle struct {
	ctrl     *gomock.Controller
	recorder *MockIHandleMockRecorder
}

// MockIHandleMockRecorder is the mock recorder for MockIHandle.
type MockIHandleMockRecorder struct {
	mock *MockIHandle
}

// NewMockIHandle creates a new mock instance.
func NewMockIHandle(ctrl *gomock.Controller) *MockIHandle {
	mock := &MockIHandle{ctrl: ctrl}
	mock.recorder = &MockIHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHandle) EXPECT() *MockIHandleMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIHandle) Handle(ctx context.IContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockIHandleMockRecorder) Handle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIHandle)(nil).Handle), ctx)
}
